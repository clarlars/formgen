import json, os, subprocess, glob
## CONSTANTS
appdesigner = "/home/niles/Documents/odk/app-designer"
appname = "coldchain"
adbranch = "cold-chain-demo"

warning = "<!--\nThis file is automatically generated and all changes will be overwritten" + "".join("\n" for i in range(100)) + "-->"
try:
    subprocess.check_call(["test", "-e", ".appname-hack"])
    contents = open(".appname-hack", "r").read().split("|")
    appname = contents[0]
    adbranch = contents[1]
except:
    pass
def yank_instance_col(table, form): return yank_instance_setting(table, form, "instance_name", "_id");
def yank_instance_setting(table, form, setting, default):
    formDef = json.loads(open(appdesigner + "/app/config/tables/" + table + "/forms/" + form + "/formDef.json", "r").read())
    try:
        return [x for x in formDef["xlsx"]["settings"] if x["setting_name"] == setting][0]["value"]
    except:
        pass
    try:
        return [x for x in formDef["xlsx"]["settings"] if x["setting_name"] == setting][0]["display"]
    except:
        pass
    try:
        return formDef["xlsx"]["specification"]["settings"][setting]["value"]
    except:
        pass
    try:
        return formDef["xlsx"]["specification"]["settings"][setting]["display"]
    except:
        return default;
def get_localized_tables():
    result = {}
    for table in get_tables():
        result[table] = yank_instance_setting(table, table, "survey", table)
    return result
def get_allowed_tables():
    result = []
    for table in get_tables():
        if subprocess.check_output(["adb", "shell", "test -d /sdcard/opendatakit/"+appname+"/config/assets/formgen/" + table + " && echo yes || echo no"]).decode("utf-8").strip() == "yes":
            result.append(table)
    return result
def get_tables():
    return [os.path.basename(x) for x in glob.glob(appdesigner + "/app/config/tables/*")]
def opendb():
    subprocess.call(["grunt", "--gruntfile", appdesigner + "/Gruntfile.js", "adbpull"])
    import sqlite3
    return sqlite3.connect(appdesigner + "/app/output/db/webDb/sqlite.db")
def checkout():
    null = open(os.devnull, "w")
    subprocess.call(["bash", "-c", "cd " + appdesigner + "; git checkout " + adbranch], stdout=null)
checkout()
