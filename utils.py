import json, os, subprocess, glob
## CONSTANTS
appdesigner = "/home/niles/Documents/odk/app-designer"
#appname = "coldchain"
#adbranch = "cold-chain-demo"
appname = "default"
adbranch = "development"

# Added to the top of every html file, a simple warning followed by 100 blank lines so the reader notices it
warning = "<!--\nThis file is automatically generated and all changes will be overwritten" + "".join("\n" for i in range(100)) + "-->"
# the makefile will write .appname-hack in the format of ":appname|:adbranch" to .appname-hack in the deploy-multiapp target, then delete it when it's done
try:
    subprocess.check_call(["test", "-e", ".appname-hack"])
    contents = open(".appname-hack", "r").read().split("|")
    appname = contents[0]
    adbranch = contents[1]
except:
    # If we couldn't read it, it probably didn't exist. Just use the constants from the top
    pass
# Tries to pull the main display column from the formDef, almost always doesn't work
def yank_instance_col(table, form): return yank_setting(table, form, "instance_name", "_id");
# Tries to pull the requested setting from the formDef, or return the default argument if it can't find it
def yank_setting(table, form, setting, default):
    formDef = json.loads(open(appdesigner + "/app/config/tables/" + table + "/forms/" + form + "/formDef.json", "r").read())
    try:
        return [x for x in formDef["xlsx"]["settings"] if x["setting_name"] == setting][0]["value"]
    except:
        pass
    try:
        return [x for x in formDef["xlsx"]["settings"] if x["setting_name"] == setting][0]["display"]
    except:
        pass
    try:
        return formDef["xlsx"]["specification"]["settings"][setting]["value"]
    except:
        pass
    try:
        return formDef["xlsx"]["specification"]["settings"][setting]["display"]
    except:
        return default;
# Returns a map of {(:table_id): localized_table_name} for each table. If no localized display name was found, uses the table id
def get_localized_tables():
    result = {}
    for table in get_tables():
        # Try and pull the display name from the settings in the formDef
        result[table] = yank_setting(table, table, "survey", table)
    return result
# Returns a list of all the tables that formgen was able to successfully generate html files for
# Pulls it from the device due to how the Makefile is set up, the local directories will have already been removed
def get_allowed_tables():
    result = []
    for table in get_tables():
        if subprocess.check_output(["adb", "shell", "test -d /sdcard/opendatakit/"+appname+"/config/assets/formgen/" + table + " && echo yes || echo no"]).decode("utf-8").strip() == "yes":
            result.append(table)
    return result
# Returns a list of every table in app designer
def get_tables():
    return [os.path.basename(x) for x in glob.glob(appdesigner + "/app/config/tables/*")]
# Returns a cursor to the database, usually used for pulling metadata properties out of the database
def opendb():
    subprocess.call(["grunt", "--gruntfile", appdesigner + "/Gruntfile.js", "adbpull"])
    import sqlite3
    return sqlite3.connect(appdesigner + "/app/output/db/webDb/sqlite.db")
# Checks out the adbranch branch in app designer
def checkout():
    null = open(os.devnull, "w")
    subprocess.check_call(["bash", "-c", "cd " + appdesigner + "; git checkout " + adbranch], stdout=null)
# Run checkout just to make sure we're on the right branch
checkout()
